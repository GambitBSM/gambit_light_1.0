#
# GAMBIT will parse this file and try to match the entries
# to the capabilities it has registered. If there are any
# conflicts it will report them, and if any capabilities
# are lacking descriptions those will be reported too.
# This is then merged with internally known information
# to create a centralised database of capability
# information. The merged file is "central_capabilities.dat",
# which can be found in the scratch directory of each
# GAMBIT run.
#
# Note: Yaml syntax for multi-line strings is this:
#
#body: |
#  This is a multi-line string.
#  "special" metacharacters may
#  appear here. The extent of this string is
#  indicated by indentation.
#
# We can break this into categories however we want; yaml will just ignore comments

UserModel_parameters: |
   Default UserModel parameters capability

initialisation: |
   Initialise the LightBit module (consistency checks, reading YAML inputs, ...)
   when the first parameter point is run.

input_point: |
   Constuct a parameter_point instance for the given parameter point

input: |
   Convert a parameter_point instance to a std::map<std::string,double>

output: |
   Run the gambit_light_interface library and collect 
   the results from all the connected user libraries

total_loglike: |
   Extract the 'total_loglike' entry from the output map 
   returned by the gambit_light_interface library
