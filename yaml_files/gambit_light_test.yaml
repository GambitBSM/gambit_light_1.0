#####################################
## GAMBIT_light configuration example
#####################################


UserModel:

  p1:
    name: param_name_1
    prior_type: flat
    range: [0.0, 5.0]

  p2:
    name: param_name_2
    prior_type: flat
    range: [0.0, 5.0]

  p3: 
    name: param_name_3
    fixed_value: 3.0

  p4: 
    name: param_name_4
    fixed_value: 4.0


UserLogLikes:

  # Note: 
  # If a loglike function expects all the UserModel parameters 
  # as input, you can leave out the 'input' section (see below).

  c_user_loglike:
    lang: c
    user_lib: gambit_light_interface/libuser_c.so
    init_fun: init_user_loglike
    input:
      - param_name_1
      - param_name_2
      - param_name_3
    output:
      - c_user_loglike_output_1
      - c_user_loglike_output_2
      - c_user_loglike_output_3


  cpp_user_loglike:
    lang: c++
    user_lib: gambit_light_interface/libuser_cpp.so
    init_fun: _Z17init_user_loglikePKcPFiS0_PvE
    input:
      - param_name_2
      - param_name_3
    output:
      - cpp_user_loglike_output_1
      - cpp_user_loglike_output_2
      # - cpp_user_loglike_output_3   # We can comment out an outputs if we 
                                      # don't want to include it in the scan output

  fortran_user_loglike:
    lang: fortran
    user_lib: gambit_light_interface/libuser_fortran.so
    init_fun: init_user_loglike
    input:
      - param_name_1
      - param_name_2
    output:
      - fortran_user_loglike_output_1


  py_user_loglike:
    lang: python
    user_lib: gambit_light_interface/libuser.py
    init_fun: init_user_loglike
    input:
      - param_name_1
      - param_name_2
      - param_name_4
    output:
      - py_user_loglike_output_1
      - py_user_loglike_output_2
      - py_user_loglike_output_3


  py_user_loglike_rosenbrock:
    lang: python
    user_lib: gambit_light_interface/libuser_rosenbrock.py
    init_fun: init_user_loglike
    input:
      - param_name_1
      - param_name_2
    output:
      - py_user_loglike_rosenbrock_output_1


Printer:

  printer: cout

  # printer: hdf5
  # options:
  #   output_file: "results.hdf5"
  #   group: "/data"
  #   buffer_length: 1000
  #   delete_file_on_restart: true

  # printer: hdf5_v1
  # options:
  #   output_file: "results.hdf5"
  #   group: "/data"
  #   delete_file_on_restart: true
  #   disable_combine_routines: false

  # printer: ascii
  # options:
  #   output_file: "results.dat"
  #   buffer_length: 10
  #   delete_file_on_restart: true


Scanner:

  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 2

    de:
      plugin: diver
      NP: 200
      convthresh: 1e-4
      verbosity: 1
      lambdajDE: false

    multinest:
      plugin: multinest
      nlive: 1000
      tol: 0.01

    mcmc:
      plugin: great
      nTrialLists: 5
      nTrials: 10000

    twalk:
      plugin: twalk


Logger:

  redirection:
    [Default]        : "default.log"
    [Scanner]        : "Scanner.log"


KeyValues:

  default_output_path: "runs/gambit_light_test"

  debug: false

  # An additional entry in the dataset and metadata, useful for identifying which
  # points correspond to a given scan in combined datasets.
  # The default is for print_scanID: true, 
  # and for it to print the date and time as an int of the form
  # scanID: HourMinuteSecondMillisecond. This can be overwritten to any integer.
  print_scanID: true
  # scanID: 1

  rng:
    generator: ranlux48
    seed: -1

  print_timing_data: true

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    model_invalid_for_lnlike_below_alt: -5e5
    print_invalid_points: false

    # A 'likelihood modifier function' recieves as input the total
    # log-likelihood value and outputs a modified log-likelihood which
    # is then passed to the scanner. This can be used to make an adaptive
    # scanner explore specific ranges of the total log-likelihood, e.g.
    # log-likelihood values corresponding to a given 1D/2D confidence region.
    # The default is to use the 'identity' modifier, which does nothing.
    use_lnlike_modifier: identity
    lnlike_modifiers:
      # Assuming that the best-fit log-likelihood value is 0.0,
      # the 'gaussian' or 'gaussian_plateau' settings below
      # will encourage the scanner to explore parameter regions
      # at the border of the 2-sigma confidence region in 2D
      # (Delta lnlike = -3.09).
      gaussian:
        mu: -3.1
        sigma: 0.5
        # use_limit: lower
        use_delta_lnlike: false
      gaussian_plateau:
        mu_dn: -3.2
        sigma_dn: 0.5
        mu_up: -3.0
        sigma_up: 3.0
        use_delta_lnlike: false
